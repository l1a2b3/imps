//Hamilton Cycle
class HamiltonianCycle
{
	final int V = 5;
	int path[];
	boolean isSafe(int v, int graph[][], int path[], int pos)
	{
		if (graph[path[pos - 1]][v] == 0)
			return false;
		for (int i = 0; i < pos; i++)
			if (path[i] == v)
				return false;
		return true;
	}
	boolean hamCycleUtil(int graph[][], int path[], int pos)
	{
		if (pos == V)
		{
			if (graph[path[pos - 1]][path[0]] == 1)
				return true;
			else
				return false;
		}
		for (int v = 1; v < V; v++)
		{
			if (isSafe(v, graph, path, pos))
			{
				path[pos] = v;
				if (hamCycleUtil(graph, path, pos + 1) == true)
					return true;
				path[pos] = -1;
			}
		}
		return false;
	}
	int hamCycle(int graph[][])
	{
		path = new int[V];
		for (int i = 0; i < V; i++)
			path[i] = -1;
		path[0] = 0;
		if (hamCycleUtil(graph, path, 1) == false)
		{
			System.out.println("\nSolution does not exist");
			return 0;
		}

		printSolution(path);
		return 1;
	}
	void printSolution(int path[])
	{
		System.out.println("Solution Exists: Following" +" is one Hamiltonian Cycle");
		for (int i = 0; i < V; i++)
			System.out.print(" " + path[i] + " ");
		System.out.println(" " + path[0] + " ");
	}
	public static void main(String args[])
	{
		HamiltonianCycle hamiltonian =new HamiltonianCycle();
		int graph1[][] = {{0, 1, 0, 1, 0},
			{1, 0, 1, 1, 1},
			{0, 1, 0, 0, 1},
			{1, 1, 0, 0, 1},
			{0, 1, 1, 1, 0},
		};
		hamiltonian.hamCycle(graph1);
		int graph2[][] = {{0, 1, 0, 1, 0},
			{1, 0, 1, 1, 1},
			{0, 1, 0, 0, 1},
			{1, 1, 0, 0, 0},
			{0, 1, 1, 0, 0},
		};
		hamiltonian.hamCycle(graph2);
	}
}

//Knight Tour
import java.util.concurrent.ThreadLocalRandom;
class GFG
{
	public static final int N = 8;
	public static final int cx[] = {1, 1, 2, 2, -1, -1, -2, -2};
	public static final int cy[] = {2, -2, 1, -1, 2, -2, 1, -1};
	boolean limits(int x, int y)
	{
		return ((x >= 0 && y >= 0) && (x < N && y < N));
	}
	boolean isempty(int a[], int x, int y)
	{
		return (limits(x, y)) && (a[y * N + x] < 0);
	}
	int getDegree(int a[], int x, int y)
	{
		int count = 0;
		for (int i = 0; i < N; ++i)
			if (isempty(a, (x + cx[i]),
						(y + cy[i])))
				count++;
		return count;
	}
	Cell nextMove(int a[], Cell cell)
	{
		int min_deg_idx = -1, c,
			min_deg = (N + 1), nx, ny;
		int start = ThreadLocalRandom.current().nextInt(1000) % N;
		for (int count = 0; count < N; ++count)
		{
			int i = (start + count) % N;
			nx = cell.x + cx[i];
			ny = cell.y + cy[i];
			if ((isempty(a, nx, ny)) &&
				(c = getDegree(a, nx, ny)) < min_deg)
			{
				min_deg_idx = i;
				min_deg = c;
			}
		}
		if (min_deg_idx == -1)
			return null;
		nx = cell.x + cx[min_deg_idx];
		ny = cell.y + cy[min_deg_idx];
		a[ny * N + nx] = a[(cell.y) * N +(cell.x)] + 1;
		cell.x = nx;
		cell.y = ny;
		return cell;
	}
	void print(int a[])
	{
		for (int i = 0; i < N; ++i)
		{
			for (int j = 0; j < N; ++j)
				System.out.printf("%d\t", a[j * N + i]);
			System.out.printf("\n");
		}
	}
	boolean neighbour(int x, int y, int xx, int yy)
	{
		for (int i = 0; i < N; ++i)
			if (((x + cx[i]) == xx) && ((y + cy[i]) == yy))
				return true;

		return false;
	}
	boolean findClosedTour()
	{
		int a[] = new int[N * N];
		for (int i = 0; i < N * N; ++i)
			a[i] = -1;
		int sx = 3;
		int sy = 2;
		Cell cell = new Cell(sx, sy);
		a[cell.y * N + cell.x] = 1; 
		Cell ret = null;
		for (int i = 0; i < N * N - 1; ++i)
		{
			ret = nextMove(a, cell);
			if (ret == null)
				return false;
		}
		if (!neighbour(ret.x, ret.y, sx, sy))
			return false;
		print(a);
		return true;
	}
	public static void main(String[] args)
	{
		while (!new GFG().findClosedTour())
		{
			;
		}
	}
}
class Cell
{
	int x;
	int y;

	public Cell(int x, int y)
	{
		this.x = x;
		this.y = y;
	}
}
//Nqueen-2
import java.util.*;
class TUF {
    public static List < List < String >> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                board[i][j] = '.';
        List < List < String >> res = new ArrayList < List < String >> ();
        dfs(0, board, res);
        return res;
    }

    static boolean validate(char[][] board, int row, int col) {
        int duprow = row;
        int dupcol = col;
        while (row >= 0 && col >= 0) {
            if (board[row][col] == 'Q') return false;
            row--;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (col >= 0) {
            if (board[row][col] == 'Q') return false;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (col >= 0 && row < board.length) {
            if (board[row][col] == 'Q') return false;
            col--;
            row++;
        }
        return true;
    }

    static void dfs(int col, char[][] board, List < List < String >> res) {
        if (col == board.length) {
            res.add(construct(board));
            return;
        }

        for (int row = 0; row < board.length; row++) {
            if (validate(board, row, col)) {
                board[row][col] = 'Q';
                dfs(col + 1, board, res);
                board[row][col] = '.';
            }
        }
    }
    static List < String > construct(char[][] board) {
        List < String > res = new LinkedList < String > ();
        for (int i = 0; i < board.length; i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    public static void main(String args[]) {
        int N = 4;
        List < List < String >> queen = solveNQueens(N);
        int i = 1;
        for (List < String > it: queen) {
            System.out.println("Arrangement " + i);
            for (String s: it) {
                System.out.println(s);
            }
            System.out.println();
            i += 1;
        }
       
    }
}


//Nqueen

public class Main {
	final int N = 4;
	void printSolution(int board[][])
	{
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++)
				System.out.print(" " + board[i][j] + " ");
			System.out.println();
		}
	}
	boolean isSafe(int board[][], int row, int col)
	{
		int i, j;
		for (i = 0; i < col; i++)
			if (board[row][i] == 1)
				return false;
		for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
			if (board[i][j] == 1)
				return false;
		for (i = row, j = col; j >= 0 && i < N; i++, j--)
			if (board[i][j] == 1)
				return false;

		return true;
	}
	boolean solveNQUtil(int board[][], int col)
	{
		if (col >= N)
			return true;
		for (int i = 0; i < N; i++) {
			if (isSafe(board, i, col)) {
				board[i][col] = 1;
				if (solveNQUtil(board, col + 1) == true)
					return true;
				board[i][col] = 0; 
			}
		}
		return false;
	}
	boolean solveNQ()
	{
		int board[][] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };
		if (solveNQUtil(board, 0) == false) {
			System.out.print("Solution does not exist");
			return false;
		}
		printSolution(board);
		return true;
	}
	public static void main(String args[])
	{
		NQueenProblem Queen = new NQueenProblem();
		Queen.solveNQ();
	}
}

//Rat in a maze

public class RatMaze {
	final int N = 4;
	void printSolution(int sol[][])
	{
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++)
				System.out.print(" " + sol[i][j] + " ");
			System.out.println();
		}
	}
	boolean isSafe(int maze[][], int x, int y)
	{
		return (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1);
	}
	boolean solveMaze(int maze[][])
	{
		int sol[][] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };
		if (solveMazeUtil(maze, 0, 0, sol) == false) {
			System.out.print("Solution doesn't exist");
			return false;
		}
		printSolution(sol);
		return true;
	}
	boolean solveMazeUtil(int maze[][], int x, int y,int sol[][])
	{
		if (x == N - 1 && y == N - 1) {
			sol[x][y] = 1;
			return true;
		}
		if (isSafe(maze, x, y) == true) {
			sol[x][y] = 1;
			if (solveMazeUtil(maze, x + 1, y, sol))
				return true;
			if (solveMazeUtil(maze, x, y + 1, sol))
				return true;
			sol[x][y] = 0;
			return false;
		}
		return false;
	}
	public static void main(String args[])
	{
		RatMaze rat = new RatMaze();
		int maze[][] = { { 1, 0, 0, 0 },
						{ 1, 1, 0, 1 },
						{ 0, 1, 0, 0 },
						{ 1, 1, 1, 1 } };
		rat.solveMaze(maze);
	}
}

//Josephus
import java.io.*; 
class Main { 
    static int josephus(int n, int k){
        if (n == 1)
            return 1;
        else
return (josephus(n - 1, k) + k - 1) % n + 1;
    }
 
public static void main(String[] args){
        int n = 14;
        int k = 2;
        System.out.println("The chosen place is "+ josephus(n, k));
    }
}

//Combination
import java.util.*;
class Comb{
    static int fact(int number){
        int f=1;
        int j=1;
        while(j<=number){
            f=f*j;
            j++;
        }
        return f;
    }
    public static void main(String args[]){
        List<Integer> numbers=new ArrayList <Integer>();
        numbers.add(9);
        numbers.add(12);
        numbers.add(19);
        numbers.add(61);
        numbers.add(19);
        int n=numbers.size();
        int r=2;
        int res=fact(n)/(fact(r)*fact(n-r));
        System.out.println(res);
    }
}

//Manveuring(Number of Paths)
class Paths{
    static int numberofpaths(int m,int n){
        if(m==1 || n==1){
            return 1;
        }
        return numberofpaths(m-1,n)+numberofpaths(m,n-1);
    }
    public static void main(String args[]){
        System.out.println(numberofpaths(3,3));
    }
}

//MajorElement

public class major{
    public static int find(int nums[]){
        int candidate=0,count=0;
        for(int num:nums){
            if(count==0){
                candidate=num;
                count=1;
            }
            else if(candidate==num)
            count++;
            else
            count--;
        }
        int majorel=0;
        for(int num:nums){
            if(num==candidate){
                majorel++;
            }
        }
        if(majorel>nums.length/2){
            return candidate;
        }
        return -1;
    }
    public static void main(String a[]){
        int nums[]={3,2,3};
        System.out.println(find(nums));
    }
}

//Manchars

import java.util.*;
class Manchers
{
	static void findLongestPalindromicString(String text)
	{
		int N = text.length();
		if (N == 0)
			return;
		N = 2 * N + 1; // Position count
		int[] L = new int[N + 1]; // LPS Length Array
		L[0] = 0;
		L[1] = 1;
		int C = 1; // centerPosition
		int R = 2; // centerRightPosition
		int i = 0; // currentRightPosition
		int iMirror; // currentLeftPosition
		int maxLPSLength = 0;
		int maxLPSCenterPosition = 0;
		int start = -1;
		int end = -1;
		int diff = -1;
		for (i = 2; i < N; i++)
		{
			iMirror = 2 * C - i;
			L[i] = 0;
			diff = R - i;
			if (diff > 0)
				L[i] = Math.min(L[iMirror], diff);
			while (((i + L[i]) + 1 < N && (i - L[i]) > 0) && (((i + L[i] + 1) % 2 == 0) || (text.charAt((i + L[i] + 1) / 2) == text.charAt((i - L[i] - 1) / 2))))
			{
				L[i]++;
			}
			if (L[i] > maxLPSLength) // Track maxLPSLength
			{
				maxLPSLength = L[i];
				maxLPSCenterPosition = i;
			}
			if (i + L[i] > R)
			{
				C = i;
				R = i + L[i];
			}
		}
		start = (maxLPSCenterPosition - maxLPSLength) / 2;
		end = start + maxLPSLength - 1;
		System.out.printf("LPS of string is %s : ", text);
		for (i = start; i <= end; i++)
			System.out.print(text.charAt(i));
		System.out.println();
	}
	public static void main(String[] args)
	{
		String text = "babcbabcbaccba";
		findLongestPalindromicString(text);
    }   
}

//Remove Hyphen
import java.util.*;
class removehyphen{
    public static String move(String s){
        int n=s.length();
        if(n==0){
            return "";
        }
        if(s.contains("-")){
            int hi=s.indexOf("-");
            return "-" + s.substring(0,hi)+s.substring(hi+1,n);
        }
        else{
            return s;
        }
        
    }
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        System.out.println(move(s));
    }
}

//Leaders
import java.util.*;
public class Leaders{
    public static void lead(int arr[]){
        int n=arr.length;
        int max=arr[n-1];
        System.out.println(max+" ");
        for(int i=n-1;i>=0;i--){
            if(arr[i]>max){
                max=arr[i];
                System.out.println(max+" ");
            }  
        }
    }
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
             arr[i]=sc.nextInt();
        }
        lead(arr);
    }
}

//Natural Sorted Order
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class naturalsort {
    public static List<String> naturalSort(List<String> strings) {
        strings.sort(new NumericStringComparator());
        return strings;
    }

    private static class NumericStringComparator implements Comparator<String> {
        private static final Pattern PATTERN = Pattern.compile("\\d+");

        private int compareNumeric(String num1, String num2) {
            int int1 = Integer.parseInt(num1);
            int int2 = Integer.parseInt(num2);
            return Integer.compare(int1, int2);
        }

        @Override
        public int compare(String str1, String str2) {
            Matcher matcher1 = PATTERN.matcher(str1);
            Matcher matcher2 = PATTERN.matcher(str2);

            int index1 = 0;
            int index2 = 0;
            while (matcher1.find(index1) && matcher2.find(index2)) {
                String group1 = matcher1.group();
                String group2 = matcher2.group();
                int result;
                if (group1.matches("\\d+") && group2.matches("\\d+")) {
                    result = compareNumeric(group1, group2);
                } else {
                    result = group1.compareTo(group2);
                }

                if (result != 0) {
                    return result;
                }

                index1 = matcher1.end();
                index2 = matcher2.end();
            }

            return Integer.compare(str1.length(), str2.length());
        }
    }

    public static void main(String[] args) {
        List<String> strings = new ArrayList<>();
        strings.add("file1.txt");
        strings.add("file10.txt");
        strings.add("file2.txt");
        strings.add("file20.txt");
        strings.add("file3.txt");

        List<String> sortedStrings = naturalSort(strings);

        for (String str : sortedStrings) {
            System.out.println(str);
	}
	}
}

//Hourglass

import java.io.*;
class Hourglass {
static int R = 5;
static int C = 5;
static int findMaxSum(int [][]mat)
{
	if (R < 3 || C < 3){
		System.out.println("Not possible");
		System.exit(0);
	}
	int max_sum = Integer.MIN_VALUE;
	for (int i = 0; i < R - 2; i++)
	{
		for (int j = 0; j < C - 2; j++)
		{
			int sum = (mat[i][j] + mat[i][j + 1] +mat[i][j + 2]) + (mat[i + 1][j + 1]) +(mat[i + 2][j] + mat[i + 2][j + 1] +mat[i + 2][j + 2]);
			max_sum = Math.max(max_sum, sum);
		}
	}
	return max_sum;
}
	static public void main (String[] args)
	{
		int [][]mat = {{1, 2, 3, 0, 0},
					{0, 0, 0, 0, 0},
					{2, 1, 4, 0, 0},
					{0, 0, 0, 0, 0},
					{1, 1, 0, 1, 0}};
		int res = findMaxSum(mat);
		System.out.println("Maximum sum of hour glass = "+ res);
	}	
}
//Sorted Unique Permutation
import java.util.*;
class Permutations{
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String input=sc.nextLine();
        distinct(input);
    }
    public static void distinct(String input){
        char[] chars=input.toCharArray();
        Arrays.sort(chars);
        input=new String(chars);
        permute(input.toCharArray(),0);
    }
    public static void permute(char[] chars,int index){
        if(index==chars.length-1){
            System.out.print(String.valueOf(chars)+" ");
            return;
        }
        Set<Character> used=new HashSet<>();
        for(int i=index;i<chars.length;i++){
            if(used.contains(chars[i])){
                continue;
            }
            used.add(chars[i]);
            swap(chars,index,i);
            permute(chars,index+1);
            swap(chars,index,i);
        }
    }
    public static void swap(char[] chars,int i, int j){
        char temp=chars[i];
        chars[i]=chars[j];
        chars[j]=temp;
    }
}
//Weighted Strings
import java.util.*;
class WeightedString{
    static int values[]=new int[26];
    public static void main(String a[]){
        insertvalues();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        List<Character> s=new ArrayList<>();
        formed(s,n);
    }
    public static void insertvalues(){
        values[0]=1;
        int prev=1;
        for(int i=1;i<26;i++){
            values[i]=(i+1)*prev+prev;
            prev=values[i];
        }
    }
    public static void formed(List<Character> s,int k){
        int low=0,high=25;
        while(k!=0){
            int ind=findfloor(k,low,high);
            s.add((char)(ind+'A'));
            k-=values[ind];
        }
        for(int i=s.size()-1;i>=0;i--){
            System.out.print(s.get(i));
        }
    }
    public static int findfloor(int k,int low,int high){
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(values[mid]<=k){
                ans=mid;
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return ans;
    }
}

//Quick Sort
import java.io.*;
class GFG {
	static void swap(int[] arr, int i, int j)
	{
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
	static int partition(int[] arr, int low, int high)
	{
		int pivot = arr[high];
		int i = (low - 1);
		for (int j = low; j <= high - 1; j++) {
			if (arr[j] < pivot) {
				i++;
				swap(arr, i, j);
			}
		}
		swap(arr, i + 1, high);
		return (i + 1);
	}
	static void quickSort(int[] arr, int low, int high)
	{
		if (low < high) {
			int pi = partition(arr, low, high);
			quickSort(arr, low, pi - 1);
			quickSort(arr, pi + 1, high);
		}
	}
	public static void printArr(int[] arr)
	{
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
	}
	public static void main(String[] args)
	{
		int[] arr = { 10, 7, 8, 9, 1, 5 };
		int N = arr.length;
		quickSort(arr, 0, N - 1);
		System.out.println("Sorted array:");
		printArr(arr);
	}
}
//Max Product

import java.util.*;
public class maxproduct{
    public static void mp(int []arr,int n){
        int max=arr[0],min=arr[0],m=arr[0],temp=0;
        for(int i=1;i<n;i++){
            if (arr[i]>0){
                max=Math.max(arr[i],arr[i]*max);
                min=Math.min(arr[i],arr[i]*min);
            }
            else if(arr[i]==0){
                max=min=0;
            }
            else{
                temp=max;
                max=Math.max(arr[i],arr[i]*min);
                min=Math.min(arr[i],arr[i]*max);
            }
            m=Math.max(m,max);
        }
        System.out.println(max);
    }
    public static void main(String a[]){
        int []arr1={4,0,-2,6};
        int n=arr1.length;
        mp(arr1,n);
    }
}

//Strobogrammatic
import java.util.*;
public class stro{
    static boolean strob(String n){
        Map<Character,Character> m=new HashMap<Character,Character>();
        m.put('1','1');
        m.put('0','0');
        m.put('8','8');
        m.put('6','9');
        m.put('9','6');
        int l=0;int r=n.length()-1;
        while(l<=r){
            if(!m.containsKey(n.charAt(l))) return false;
            if(m.get(n.charAt(l))!=n.charAt(r)) return false;
            l++;
            r--;
        }
        System.out.println("Yes");
        return true;
    }
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String n=sc.nextLine();
        strob(n);
    }
}

//Karastuba
import java.util.*;
public class karastuba{
    public static long karas(long x,long y){
        if(x<10 && y<10){
            return x*y;
        }
        long n=Math.max(String.valueOf(x).length(),String.valueOf(y).length());
        long n2=n/2;
        long a=x/(long)Math.pow(10,n2);
        long b=x%(long)Math.pow(10,n2);
        long c=y/(long)Math.pow(10,n2);
        long d=y%(long)Math.pow(10,n2);
        long ac=karas(a,c);
        long bd=karas(b,d);
        long adbc=karas(a+b,c+d)-ac-bd;
        long result=ac*(long)Math.pow(10,2*n2)+adbc*(long)Math.pow(10,n2)+bd;
        return result;
    }
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        long x=sc.nextLong();
        long y=sc.nextLong();
        long res=karas(x,y);
        System.out.println(res);
    }
}

//Binary Palindrome
import java.util.*;
public class BinaryPalindrome{
    static boolean check(int n){
        int reversed=0;
        int original=n;
        while(n>0){
            reversed<<=1;
            reversed|=(n&1);
            n>>=1;
        }
        return(reversed==original);
    }
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(check(n));
    }
}

//FlipBit
import java.util.*;
public class flipbit{
    public static int flip(int a){
        int cl=0,pl=0,ml=0;
        while(a!=0){
           if((a&1)==1){
            cl++;
           } 
           else if((a&1)==0){
            if((a&2)==0){
                pl=0;
            }
            else{
                pl=cl;
            }
            cl=0;
           }
            ml=Math.max(pl+cl,ml);
            a>>=1;
        }
        return ml+1;
    }
    public static void main(String a[]){
        int n=0b111011110;
        System.out.println(flip(n));
    }
}

//Block Swap
import java.util.*;
public class swap{
    public static void swap1(int arr[],int a,int b,int r){
        for(int i=0;i<r;i++){
            int temp=arr[i+a];
            arr[i+a]=arr[i+b];
            arr[i+b]=temp;
        }
    }
    public static void leftrotate(int arr[],int r){
        int n=arr.length;
        if(r==0 || r==n) return;
        int A=r;
        int B=n-r;
        while(A!=B){
            if(A<B){
                swap1(arr,r-A,A+B-r,A);
                B=B-A;
            }
            else{
                swap1(arr,r-A,r,B);
                A=A-B;
            }
        }
        swap1(arr,r-A,r,B);
        
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int [] arr=new int [n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int l=sc.nextInt();
        leftrotate(arr,l);
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
    }
}

//Simple Sieve
import java.util.*;
class simplesieve{
    static void ss(int n){
        boolean prime[]=new boolean[n+1];
        for(int i=0;i<n;i++)
        prime[i]=true;
        for(int p=2;p*p<=n;p++){
            if(prime[p]==true){
                for(int i=p*p;i<=n;i+=p){
                    prime[i]=false;
                }
            }
        }
        for(int i=2;i<n;i++){
            if(prime[i]==true){
                System.out.print(i+" ");
            }
        }
    }
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        ss(n);
    }
}

//Segment Sieve
import java.util.*;
class Segment{
    static void ses(int l,int h){
        boolean prime[]=new boolean[h+1];
        for(int p=2;p*p<=h;p++){
            int sm=(l/p)*p;
            if(sm<l)
            sm+=p;
            for(int i=sm;i<=h;i+=p){
                prime[i]=true;
            }
        }
        for(int i=l;i<=h;i++){
            if(prime[i]==false)
            System.out.print(i+" ");
        }
    }
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        int l=sc.nextInt();
        int h=sc.nextInt();
        ses(l,h);
    }
}
//Lexigographic Palindrome
class lexi {
	static char MAX_CHAR = 26;
	static void countFreq(String str, int freq[], int len)
	{
		for (int i = 0; i < len; i++)
		{
			freq[str.charAt(i) - 'a']++;
		}
	}
	static boolean canMakePalindrome(int freq[], int len)
	{
		int count_odd = 0;
		for (int i = 0; i < MAX_CHAR; i++)
		{
			if (freq[i] % 2 != 0)
			{
				count_odd++;
			}
		}
		if (len % 2 == 0)
		{
			if (count_odd > 0)
			{
				return false;
			}
			else
			{
				return true;
			}
		}
		if (count_odd != 1)
		{
			return false;
		}

		return true;
	}
	static String findOddAndRemoveItsFreq(int freq[])
	{
		String odd_str = "";
		for (int i = 0; i < MAX_CHAR; i++)
		{
			if (freq[i] % 2 != 0)
			{
				freq[i]--;
				odd_str = odd_str + (char) (i + 'a');
				return odd_str;
			}
		}
		return odd_str;
	}
	static String findPalindromicString(String str)
	{
		int len = str.length();
		int freq[] = new int[MAX_CHAR];
		countFreq(str, freq, len);

		if (!canMakePalindrome(freq, len))
		{
			return "No Palindromic String";
		}
		String odd_str = findOddAndRemoveItsFreq(freq);
		String front_str = "", rear_str = " ";
		for (int i = 0; i < MAX_CHAR; i++)
		{
			String temp = "";
			if (freq[i] != 0)
			{
				char ch = (char) (i + 'a');
				for (int j = 1; j <= freq[i] / 2; j++)
				{
					temp = temp + ch;
				}
				front_str = front_str + temp;
				rear_str = temp + rear_str;
			}
		}
		return (front_str + odd_str + rear_str);
	}
	public static void main(String[] args)
	{
		String str = "malayalam";
		System.out.println(findPalindromicString(str));
	}
}

//Euclid-gcd
import java.util.*;
class euclid{
    static int gcd(int a,int b){
        if(a==0){
            return b;
        }
        return(gcd(b%a,a));
    }
    public static void main(String args[]){
        Scanner sc=new Scanner (System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        System.out.println(gcd(a,b));
    }
}

//Other euclid
import java.util.*;
public class euclid{
    public static void main(String args[]){
        int a=161,b=28,r=0,q=0;
        int s1=1,s2=0,t1=0,t2=1,s,t;
        while(a!=0 && b!=0){
            r=a%b;
            q=a/b;
            s=(s1-s2*q);
            t=(t1-t2*q);
            a=b;
            b=r;
            s1=s2;
            s2=s;
            t1=t2;
            t2=t;
            System.out.println(s1+" "+t1);
        }
        System.out.println(a+" "+b);
    }
}

//Swap Nibble
public class swapnibble {
    public static byte swapNibbles(byte b) {
        // Extract the upper and lower nibbles
        byte upperNibble = (byte) ((b & 0xF0) >>> 4);
        byte lowerNibble = (byte) (b & 0x0F);
        
        // Shift the nibbles and combine them
        byte swappedByte = (byte) ((lowerNibble << 4) | upperNibble);
        
        return swappedByte;
    }

    public static void main(String[] args) {
        byte byteValue = (byte) 0xAB;  // 1010 1011 in binary
        byte swappedByte = swapNibbles(byteValue);

        System.out.println("Original byte: " + Integer.toBinaryString(byteValue & 0xFF));
        System.out.println("Swapped byte: " + Integer.toBinaryString(swappedByte & 0xFF));
    }
}

//Chinese Remainder Theorem
import java.io.*;
class GFG {
	static int findMinX(int num[], int rem[], int k)
	{
		int x = 1; // Initialize result
		while (true)
		{
			int j;
			for (j=0; j<k; j++ )
				if (x%num[j] != rem[j])
				break;
			if (j == k)
				return x;
			x++;
		}
	}
	public static void main(String args[])
	{
		int num[] = {3, 4, 5};
		int rem[] = {2, 3, 1};
		int k = num.length;
		System.out.println("x is " + findMinX(num, rem, k));
	}
}

//Eulerphi
import java.util.*;
public class Eulerphi{
    public static int phi(int n){
        int res=n;
        for(int p=2;p*p<=n;p++){
            if(n%p==0){
                while(n%p==0){
                    n/=p;
                }
                res-=res/p;
            }
        }
        if(n>1)
            res-=res/n;
        return res;
    }
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.print(phi(n));
    }
}

//Toggle Switch
import java.util.*;
public class Toggle{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        boolean b[]=new boolean[n+1];
        int c=0;
        int o=0;
        for(int i=1;i<=n;i++){
            for(int j=i;j*i<=n;j++){
                if(b[j]==false)
                b[j]=true;
                else
                b[j]=false;
            }
        }
        for(int i=1;i<=n;i++){
            if(b[i]==false)
            o++;
            else
            c++;
        }
        System.out.println(o+" "+c);

    }
}

//Alice Apple Tree
import java.util.*;
public class aliceapple{
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        int apple=sc.nextInt();
        int cnt=0,sum=0;
        while(sum<apple){
            cnt++;
            sum+=12*cnt*cnt;
        }
        System.out.println((8*cnt));
    }
}

//Array Input
import java.util.*;
public class arrayinput{
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        for(int i=0;i<n;i++){
            System.out.println(arr[i]+" ");
        }
    }
}

//BinaryDecimal
import java.util.*;
public class binarydecimal{
    public static void main(String a[]){
        int n1=10101;
        String n2=String.valueOf(n1);
        System.out.println(n2);
        String n="10101";
        System.out.println(Integer.parseInt(n,2));
        int num=10;
        System.out.println(Integer.toBinaryString(num));
    }
}
